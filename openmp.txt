#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

#define MAX_THREADS 10000

int M, N, K;
int matrix_A[MAX_THREADS][MAX_THREADS];
int matrix_B[MAX_THREADS][MAX_THREADS];
int result_matrix[MAX_THREADS][MAX_THREADS];

int main() {
    printf("Enter the dimensions of matrix A (M x N): ");
    scanf("%d %d", &M, &N);
    printf("Enter the dimensions of matrix B (N x K): ");
    scanf("%d %d", &N, &K);
   
    srand(time(NULL));
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            matrix_A[i][j] = rand() % 10;
        }
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < K; j++) {
            matrix_B[i][j] = rand() % 10;
        }
    }
  
    double start_time = omp_get_wtime();
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < K; j++) {
            for (int k = 0; k < N; k++) {
                result_matrix[i][j] += matrix_A[i][k] * matrix_B[k][j];
            }
        }
    }
    double end_time = omp_get_wtime();
    
    double runtime = end_time - start_time;
    printf("Matrix multiplication took %f seconds\n", runtime);
    
    // Print the matrices and the result matrix optional since the matrices are getting very big
    /*printf("Matrix A:\n");
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", matrix_A[i][j]);
        }
        printf("\n");
    }
    printf("Matrix B:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < K; j++) {
            printf("%d ", matrix_B[i][j]);
        }
        printf("\n");
    }
    printf("Result matrix:\n");
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < K; j++) {
            printf("%d ", result_matrix[i][j]);
        }
        printf("\n");
    }*/
    return 0;
}